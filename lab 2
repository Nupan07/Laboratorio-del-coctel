import numpy as np
import matplotlib.pyplot as plt
from sklearn.decomposition import FastICA
import sounddevice as sd
import soundfile as sf
import os
from scipy.signal import butter, lfilter
import librosa

# Configuración de la frecuencia de muestreo y ruta de archivos
FRECUENCIA_MUESTREO = 22050
RUTA_ARCHIVOS_AUDIO = 'C:\\Users\\valen\\Downloads\\'

# Archivos de audio y ruido
ARCHIVOS_AUDIO = ['Audio.wav', 'Audio 2.wav', 'Audio 3.wav']
ARCHIVOS_RUIDO = ['Ruido.wav', 'Ruido 2.wav', 'Ruido 3.wav']

# Función para cargar y normalizar audio
def cargar_y_normalizar(archivos, ruta, frecuencia_muestreo):
    datos = []
    for archivo in archivos:
        señal, _ = librosa.load(os.path.join(ruta, archivo), sr=frecuencia_muestreo)
        señal_normalizada = normalizar_audio(señal)
        datos.append(señal_normalizada)
    return datos

def normalizar_audio(audio):
    return audio / np.max(np.abs(audio))

# Visualizar audio en dominio del tiempo y frecuencia
def visualizar_audio(audio, frecuencia_muestreo, titulo=''):
    tiempo = np.linspace(0, len(audio) / frecuencia_muestreo, len(audio))
    plt.figure(figsize=(14, 6))
    
    # Dominio del tiempo
    plt.subplot(2, 1, 1)
    plt.plot(tiempo, audio)
    plt.title(f'{titulo} - Dominio del Tiempo')
    plt.xlabel('Tiempo (s)')
    plt.ylabel('Amplitud')
    
    # Dominio de la frecuencia
    fft_audio = np.fft.fft(audio)
    frecuencias = np.fft.fftfreq(len(audio), 1 / frecuencia_muestreo)
    
    plt.subplot(2, 1, 2)
    plt.plot(frecuencias[:len(frecuencias)//2], np.abs(fft_audio[:len(fft_audio)//2]))
    plt.title(f'{titulo} - Dominio de la Frecuencia')
    plt.xlabel('Frecuencia (Hz)')
    plt.ylabel('Magnitud')
    
    plt.tight_layout()
    plt.show()

# Filtrado pasa banda
def filtro_pasa_banda(frecuencia_corte_inferior, frecuencia_corte_superior, frecuencia_muestreo, orden=6):
    nyquist = 0.5 * frecuencia_muestreo
    low = frecuencia_corte_inferior / nyquist
    high = frecuencia_corte_superior / nyquist
    b, a = butter(orden, [low, high], btype='band')
    return b, a

def aplicar_filtro_pasa_banda(datos_audio, frecuencia_corte_inferior, frecuencia_corte_superior, frecuencia_muestreo):
    b, a = filtro_pasa_banda(frecuencia_corte_inferior, frecuencia_corte_superior, frecuencia_muestreo)
    return [lfilter(b, a, audio) for audio in datos_audio]

# Reducción de ruido
def reducir_ruido(audio, ruido):
    if len(ruido) < len(audio):
        ruido = np.pad(ruido, (0, len(audio) - len(ruido)), 'constant')
    else:
        ruido = ruido[:len(audio)]
    
    fft_audio = np.fft.fft(audio)
    fft_ruido = np.fft.fft(ruido)
    abs_fft_ruido = np.abs(fft_ruido)
    
    # Umbral ajustado para reducción de ruido
    umbral = np.percentile(abs_fft_ruido, 85)
    fft_limpio = np.where(abs_fft_ruido < umbral, fft_audio, fft_audio - fft_ruido)
    
    return np.real(np.fft.ifft(fft_limpio))

# Cálculo del SNR
def calcular_snr(señal, ruido):
    if len(ruido) < len(señal):
        ruido = np.pad(ruido, (0, len(señal) - len(ruido)), 'constant')
    else:
        ruido = ruido[:len(señal)]
    
    potencia_señal = np.sum(señal**2)
    potencia_ruido = np.sum(ruido**2)
    if potencia_ruido == 0:
        return float('inf')
    return 10 * np.log10(potencia_señal / potencia_ruido)

# Separación de voces usando ICA
def separar_voces(datos_audio, num_componentes):
    longitud_maxima = max(len(audio) for audio in datos_audio)
    audios_rellenos = [np.pad(audio, (0, longitud_maxima - len(audio)), 'constant') for audio in datos_audio]
    matriz_datos_audio = np.array(audios_rellenos).T
    
    ica = FastICA(n_components=num_componentes, random_state=42, max_iter=20000, tol=0.0001)
    fuentes = ica.fit_transform(matriz_datos_audio)
    return fuentes

# Guardar voces aisladas en archivos de audio
def guardar_voces(voces, frecuencia_muestreo):
    for i, voz in enumerate(voces.T):
        voz_normalizada = normalizar_audio(voz)
        archivo_voz = f"Voz_{i+1}.wav"
        sf.write(archivo_voz, voz_normalizada, frecuencia_muestreo)
        print(f"Escribiendo {archivo_voz}")
        print(f"Tamaño del archivo: {os.path.getsize(archivo_voz)} bytes")

def reproducir_voz(numero_voz):
    archivo_voz = f"Voz_{numero_voz}.wav"
    print(f"Reproduciendo {archivo_voz}")
    try:
        datos, sr = librosa.load(archivo_voz, sr=FRECUENCIA_MUESTREO)
        print(f"Forma de datos de audio: {datos.shape}")
        sd.play(datos, sr)
        sd.wait()
    except FileNotFoundError as e:
        print(e)
    except Exception as e:
        print(f"Error al reproducir {archivo_voz}: {e}")

# Ejecución del proceso
# Cargar y normalizar audios
datos_audios = cargar_y_normalizar(ARCHIVOS_AUDIO, RUTA_ARCHIVOS_AUDIO, FRECUENCIA_MUESTREO)
datos_ruidos = cargar_y_normalizar(ARCHIVOS_RUIDO, RUTA_ARCHIVOS_AUDIO, FRECUENCIA_MUESTREO)

# Visualizar audios originales
for i, audio in enumerate(datos_audios):
    visualizar_audio(audio, FRECUENCIA_MUESTREO, f'Audio Original {i+1}')

# Aplicar filtro pasa banda
datos_audios_filtrados = aplicar_filtro_pasa_banda(datos_audios, 200, 4000, FRECUENCIA_MUESTREO)

# Visualizar audios filtrados
for i, audio in enumerate(datos_audios_filtrados):
    visualizar_audio(audio, FRECUENCIA_MUESTREO, f'Audio Filtrado {i+1}')

# Aplicar reducción de ruido
datos_audios_limpios = [reducir_ruido(audio, ruido) for audio, ruido in zip(datos_audios_filtrados, datos_ruidos)]

# Visualizar audios limpios
for i, audio in enumerate(datos_audios_limpios):
    visualizar_audio(audio, FRECUENCIA_MUESTREO, f'Audio Limpio {i+1}')

# Calcular SNR para cada audio y ruido
snrs = [calcular_snr(audio, ruido) for audio, ruido in zip(datos_audios_limpios, datos_ruidos)]

# Mostrar SNR al final
print("\nSNR para cada audio con ruido:")
for i, snr in enumerate(snrs):
    print(f'SNR para Audio {i+1} con Ruido {i+1}: {snr:.2f} dB')

# Separar voces usando ICA (si es necesario para otros propósitos, pero sin visualización)
NUM_COMPONENTES = 3
datos_voces = separar_voces(datos_audios_limpios, NUM_COMPONENTES)

# Guardar y reproducir voces (si es necesario, pero sin visualización)
guardar_voces(datos_voces, FRECUENCIA_MUESTREO)
for i in range(NUM_COMPONENTES):
    reproducir_voz(i + 1)
